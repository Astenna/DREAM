@misc{reference_doc,
    keywords={intro},
    title={A.Y. 2021-2022 Software Engineering 2 Requirement Engineering and Design Project: goal, schedule, and rules},
    author={Elisabetta Di Nitto and Matteo Rossi and Damian Tamburri},
    year={2021}, 
    month=Oct
}

@misc{rasd,
    keywords={intro},
    title={Requirements Analysis and Specifications Document, DREAM - Data-dRiven PrEdictive FArMing in Telangana},
    author={Kinga Marek and Józef Piechaczek and Mariusz Wiśniewski},
    year={2021}, 
    month=Dec
}

@misc{telangana,
    keywords={intro},
    title = "{Telangana} --- {W}ikipedia{,} The Free Encyclopedia",
    year = "2021",
    howpublished={\url{http://en.wikipedia.org/w/index.php?title=Telangana&oldid=1055881688}},
    urldate={2021-11-21},
 }

% article
@misc{global_demand_for_food,
    keywords={intro},
    title={Global Demand for Food Is Rising. Can We Meet It?},
    author={Maarten Elferink and Florian Schierhorn},
    howpublished={\url{https://hbr.org/2016/04/global-demand-for-food-is-rising-can-we-meet-it}}, 
    urldate={2021-11-21},
    year={2016}, 
    month=Apr
}

@software{tsdps,
    keywords={intro},
    author={Telangana State Development Planning Society},
    title={Automatic Weather Stations},
    howpublished={\url{https://tsdps.telangana.gov.in/aws.jsp}},
    urldate={2021-11-21}
}
% software
@software{docker,
  title = {Docker},
  url = {https://docker.com/},
  version = {20.10.02}, 
  date={2021-05-11}
}

@inproceedings{performance_requirements,
    author = {Bondi, Andr\'{e} B.},
    title = {Best Practices for Writing and Managing Performance Requirements: A Tutorial},
    year = {2012},
    isbn = {9781450312028},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2188286.2188288},
    doi = {10.1145/2188286.2188288},
    abstract = {Performance requirements are one of the main drivers of architectural decisions. Because many performance problems have their roots in architectural decisions, and since poor performance is a principal cause of software project risk, it is essential that performance requirements be developed early in the software lifecycle, and that they be clearly formulated. In this tutorial, we shall look at criteria for high-quality performance requirements, including algebraic consistency, measurability, testability, and linkage to business and engineering needs. While focus of this tutorial is on practice, we shall show how the drafting of performance requirements can be aided by performance modeling. We shall show methods for presenting and managing performance requirements that will improve their chances of being accepted by architects, developers, testers, contract negotiators, and purchasers; and of their being successfully implemented and tested.},
    booktitle = {Proceedings of the 3rd ACM/SPEC International Conference on Performance Engineering},
    pages = {1–8},
    numpages = {8},
    keywords = {performance requirements, system performance},
    location = {Boston, Massachusetts, USA},
    series = {ICPE '12}
}

@misc{GDPR,
    author={The European Parliament and the Council of the European Union},
    title={Regulation (EU) 2016/679 of the European Parliament and of the Council},
    howpublished={\url{https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:32016R0679}}, 
    urldate={2021-12-03},
    year={2016},
    month=Apr,
    day=27
}

@misc{india_privacy_doc,
    author={The Bureau of Indian Standards},
    title={IS 17428.1 Data Privacy Assurance Part 1 Engineering and Management Requirements},
    howpublished={\url{https://standardsbis.bsbedge.com/BIS_SearchStandard.aspx?Standard_Number=IS\%2017428\%20:\%20Part\%201&id=33561}}, 
    urldate={2021-12-03},
    year={2020},
}

@misc{Rfc2898DeriveBytes,
    author={Microsoft},
    title={Rfc2898DeriveBytes Class},
    howpublished={\url{https://docs.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rfc2898derivebytes?view=net-6.0}}, 
    urldate={2021-12-18},
}

@misc{alloy,
    author={Software Design Group, MIT},
    title={Alloy modeling language and analyzer},
    howpublished={\url{https://alloytools.org}}, 
    urldate={2021-12-22},
}

@misc{rest-microsoft,
    title={RESTful web API design},
    howpublished={\url{https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design}}, 
    urldate={2021-12-29},
}

@misc{ntier,
    title={Common web application architectures},
    howpublished={\url{https://docs.microsoft.com/en-gb/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures}}, 
    urldate={2021-12-29},
}

@misc{di,
    title={Dependency injection in ASP.NET Core},
    howpublished={\url{https://docs.microsoft.com/en-gb/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-6.0}}, 
    urldate={2021-12-29},
}

@phdthesis{rest,
    abstract = {The World Wide Web has succeeded in large part because its software
        architecture has been designed to meet the needs of an Internet-scale
        distributed hypermedia system. The Web has been iteratively developed
        over the past ten years through a series of modifications to the
        standards that define its architecture. In order to identify those
        aspects of the Web that needed improvement and avoid undesirable
        modifications, a model for the modern Web architecture was needed
        to guide its design, definition, and deployment.
        
        Software architecture research investigates methods for determining
        how best to partition a system, how components identify and communicate
        with each other, how information is communicated, how elements of
        a system can evolve independently, and how all of the above can be
        described using formal and informal notations. My work is motivated
        by the desire to understand and evaluate the architectural design
        of network-based application software through principled use of architectural
        constraints, thereby obtaining the functional, performance, and social
        properties desired of an architecture. An architectural style is
        a named, coordinated set of architectural constraints.
        
        This dissertation defines a framework for understanding software architecture
        via architectural styles and demonstrates how styles can be used
        to guide the architectural design of network-based application software.
        A survey of architectural styles for network-based applications is
        used to classify styles according to the architectural properties
        they induce on an architecture for distributed hypermedia. I then
        introduce the Representational State Transfer (REST) architectural
        style and describe how REST has been used to guide the design and
        development of the architecture for the modern Web.
        
        REST emphasizes scalability of component interactions, generality
        of interfaces, independent deployment of components, and intermediary
        components to reduce interaction latency, enforce security, and encapsulate
        legacy systems. I describe the software engineering principles guiding
        REST and the interaction constraints chosen to retain those principles,
        contrasting them to the constraints of other architectural styles.
        Finally, I describe the lessons learned from applying REST to the
        design of the Hypertext Transfer Protocol and Uniform Resource Identifier
        standards, and from their subsequent deployment in Web client and
        server software.},
    added-at = {2008-03-05T21:11:28.000+0100},
    author = {Fielding, Roy Thomas},
    biburl = {https://www.bibsonomy.org/bibtex/217b085721104f50d2f804bd1df197edc/gromgull},
    file = {Site:2000/Fielding2000Phd.pdf:PDF},
    interhash = {092ba78050ae9da156348ac20fccbd12},
    intrahash = {17b085721104f50d2f804bd1df197edc},
    keywords = {architecture rest},
    owner = {flint},
    school = {University of California, Irvine},
    timestamp = {2008-03-05T21:11:28.000+0100},
    title = {{REST:} Architectural Styles and the Design of Network-based Software
    Architectures},
    type = {Doctoral dissertation},
    url = {http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm},
    year = 2000
}
